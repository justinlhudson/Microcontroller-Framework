   1               		.file	"heap_4.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  12               	prvInsertBlockIntoFreeList:
  13               	.LFB10:
  14               		.file 1 "External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c"
   1:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** /*
   2:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****     FreeRTOS V8.2.0 - Copyright (C) 2015 Real Time Engineers Ltd.
   3:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****     All rights reserved
   4:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
   5:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
   7:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****     This file is part of the FreeRTOS distribution.
   8:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
   9:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****     Free Software Foundation >>!AND MODIFIED BY!<< the FreeRTOS exception.
  12:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
  13:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	***************************************************************************
  14:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	***************************************************************************
  19:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
  20:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****     link: http://www.freertos.org/a00114.html
  24:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
  25:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****     ***************************************************************************
  26:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****      *                                                                       *
  27:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****      *    platform software that is more than just the market leader, it     *
  30:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****      *    is the industry's de facto standard.                               *
  31:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****      *                                                                       *
  32:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****      *    tutorial book, reference manual, or both:                          *
  35:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****      *                                                                       *
  37:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****     ***************************************************************************
  38:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
  39:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	the FAQ page "My application does not run, what could be wrong?".  Have you
  41:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	defined configASSERT()?
  42:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
  43:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	embedded software for free we request you assist our global community by
  45:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	participating in the support forum.
  46:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
  47:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	be as productive as possible as early as possible.  Now you can receive
  49:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	Ltd, and the world's leading authority on the world's leading RTOS.
  51:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
  52:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
  56:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
  59:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
  63:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****     engineered and independently SIL3 certified version for use in safety and
  65:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****     mission critical applications that require provable dependability.
  66:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
  67:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****     1 tab == 4 spaces!
  68:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** */
  69:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
  70:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** /*
  71:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****  * A sample implementation of pvPortMalloc() and vPortFree() that combines
  72:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****  * (coalescences) adjacent memory blocks as they are freed, and in so doing
  73:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****  * limits memory fragmentation.
  74:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****  *
  75:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****  * See heap_1.c, heap_2.c and heap_3.c for alternative implementations, and the
  76:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****  * memory management pages of http://www.FreeRTOS.org for more information.
  77:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****  */
  78:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** #include <stdlib.h>
  79:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
  80:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  81:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** all the API functions to use the MPU wrappers.  That should only be done when
  82:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** task.h is included from an application file. */
  83:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  84:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
  85:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** #include "FreeRTOS.h"
  86:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** #include "task.h"
  87:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
  88:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  89:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
  90:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** /* Block sizes must not get too small. */
  91:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** #define heapMINIMUM_BLOCK_SIZE	( ( size_t ) ( xHeapStructSize * 2 ) )
  92:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
  93:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** /* Assumes 8bit bytes! */
  94:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** #define heapBITS_PER_BYTE		( ( size_t ) 8 )
  95:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
  96:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** /* Allocate the memory for the heap. */
  97:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** #if( configAPPLICATION_ALLOCATED_HEAP == 1 )
  98:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	/* The application writer has already defined the array used for the RTOS
  99:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	heap - probably so it can be placed in a special segment or address. */
 100:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	extern uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];
 101:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** #else
 102:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	static uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];
 103:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** #endif /* configAPPLICATION_ALLOCATED_HEAP */
 104:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 105:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** /* Define the linked list structure.  This is used to link free blocks in order
 106:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** of their memory address. */
 107:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** typedef struct A_BLOCK_LINK
 108:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** {
 109:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	struct A_BLOCK_LINK *pxNextFreeBlock;	/*<< The next free block in the list. */
 110:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	size_t xBlockSize;						/*<< The size of the free block. */
 111:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** } BlockLink_t;
 112:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 113:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 114:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 115:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** /*
 116:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****  * Inserts a block of memory that is being freed into the correct position in
 117:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****  * the list of free memory blocks.  The block being freed will be merged with
 118:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****  * the block in front it and/or the block behind it if the memory blocks are
 119:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****  * adjacent to each other.
 120:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****  */
 121:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert );
 122:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 123:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** /*
 124:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****  * Called automatically to setup the required heap structures the first time
 125:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****  * pvPortMalloc() is called.
 126:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c ****  */
 127:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** static void prvHeapInit( void );
 128:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 129:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 130:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 131:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** /* The size of the structure placed at the beginning of each allocated memory
 132:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** block must by correctly byte aligned. */
 133:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** static const size_t xHeapStructSize	= ( ( sizeof( BlockLink_t ) + ( portBYTE_ALIGNMENT - 1 ) ) & ~p
 134:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 135:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** /* Create a couple of list links to mark the start and end of the list. */
 136:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** static BlockLink_t xStart, *pxEnd = NULL;
 137:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 138:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** /* Keeps track of the number of free bytes remaining, but says nothing about
 139:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** fragmentation. */
 140:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** static size_t xFreeBytesRemaining = 0U;
 141:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** static size_t xMinimumEverFreeBytesRemaining = 0U;
 142:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 143:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** /* Gets set to the top bit of an size_t type.  When this bit in the xBlockSize
 144:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** member of an BlockLink_t structure is set then the block belongs to the
 145:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** application.  When the bit is free the block is still part of the free heap
 146:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** space. */
 147:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** static size_t xBlockAllocatedBit = 0;
 148:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 149:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 150:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 151:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** void *pvPortMalloc( size_t xWantedSize )
 152:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** {
 153:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
 154:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** void *pvReturn = NULL;
 155:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 156:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	vTaskSuspendAll();
 157:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	{
 158:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		/* If this is the first call to malloc then the heap will require
 159:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		initialisation to setup the list of free blocks. */
 160:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		if( pxEnd == NULL )
 161:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		{
 162:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			prvHeapInit();
 163:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		}
 164:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		else
 165:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		{
 166:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			mtCOVERAGE_TEST_MARKER();
 167:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		}
 168:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 169:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		/* Check the requested block size is not so large that the top bit is
 170:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		set.  The top bit of the block size member of the BlockLink_t structure
 171:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		is used to determine who owns the block - the application or the
 172:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		kernel, so it must be free. */
 173:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 174:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		{
 175:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			/* The wanted size is increased so it can contain a BlockLink_t
 176:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			structure in addition to the requested amount of bytes. */
 177:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			if( xWantedSize > 0 )
 178:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			{
 179:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				xWantedSize += xHeapStructSize;
 180:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 181:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				/* Ensure that blocks are always aligned to the required number
 182:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				of bytes. */
 183:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 184:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				{
 185:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					/* Byte alignment required. */
 186:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 187:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 188:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				}
 189:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				else
 190:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				{
 191:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					mtCOVERAGE_TEST_MARKER();
 192:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				}
 193:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			}
 194:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			else
 195:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			{
 196:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				mtCOVERAGE_TEST_MARKER();
 197:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			}
 198:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 199:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 200:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			{
 201:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				/* Traverse the list from the start	(lowest address) block until
 202:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				one	of adequate size is found. */
 203:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				pxPreviousBlock = &xStart;
 204:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				pxBlock = xStart.pxNextFreeBlock;
 205:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 206:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				{
 207:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					pxPreviousBlock = pxBlock;
 208:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					pxBlock = pxBlock->pxNextFreeBlock;
 209:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				}
 210:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 211:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				/* If the end marker was reached then a block of adequate size
 212:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				was	not found. */
 213:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				if( pxBlock != pxEnd )
 214:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				{
 215:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					/* Return the memory space pointed to - jumping over the
 216:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					BlockLink_t structure at its start. */
 217:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize )
 218:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 219:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					/* This block is being returned for use so must be taken out
 220:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					of the list of free blocks. */
 221:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 222:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 223:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					/* If the block is larger than required it can be split into
 224:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					two. */
 225:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 226:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					{
 227:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 						/* This block is to be split into two.  Create a new
 228:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 						block following the number of bytes requested. The void
 229:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 						cast is used to prevent byte alignment warnings from the
 230:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 						compiler. */
 231:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 232:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 233:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 234:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 						/* Calculate the sizes of two blocks split from the
 235:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 						single block. */
 236:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 237:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 						pxBlock->xBlockSize = xWantedSize;
 238:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 239:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 						/* Insert the new block into the list of free blocks. */
 240:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 241:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					}
 242:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					else
 243:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					{
 244:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 						mtCOVERAGE_TEST_MARKER();
 245:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					}
 246:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 247:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					xFreeBytesRemaining -= pxBlock->xBlockSize;
 248:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 249:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 250:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					{
 251:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 252:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					}
 253:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					else
 254:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					{
 255:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 						mtCOVERAGE_TEST_MARKER();
 256:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					}
 257:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 258:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					/* The block is being returned - it is allocated and owned
 259:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					by the application and has no "next" block. */
 260:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					pxBlock->xBlockSize |= xBlockAllocatedBit;
 261:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					pxBlock->pxNextFreeBlock = NULL;
 262:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				}
 263:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				else
 264:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				{
 265:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					mtCOVERAGE_TEST_MARKER();
 266:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				}
 267:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			}
 268:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			else
 269:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			{
 270:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				mtCOVERAGE_TEST_MARKER();
 271:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			}
 272:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		}
 273:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		else
 274:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		{
 275:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			mtCOVERAGE_TEST_MARKER();
 276:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		}
 277:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 278:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		traceMALLOC( pvReturn, xWantedSize );
 279:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	}
 280:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	( void ) xTaskResumeAll();
 281:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 282:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
 283:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	{
 284:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		if( pvReturn == NULL )
 285:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		{
 286:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			extern void vApplicationMallocFailedHook( void );
 287:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			vApplicationMallocFailedHook();
 288:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		}
 289:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		else
 290:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		{
 291:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			mtCOVERAGE_TEST_MARKER();
 292:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		}
 293:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	}
 294:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	#endif
 295:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 296:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 297:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	return pvReturn;
 298:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** }
 299:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 300:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 301:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** void vPortFree( void *pv )
 302:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** {
 303:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** uint8_t *puc = ( uint8_t * ) pv;
 304:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** BlockLink_t *pxLink;
 305:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 306:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	if( pv != NULL )
 307:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	{
 308:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		/* The memory being freed will have an BlockLink_t structure immediately
 309:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		before it. */
 310:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		puc -= xHeapStructSize;
 311:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 312:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		/* This casting is to keep the compiler from issuing warnings. */
 313:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		pxLink = ( void * ) puc;
 314:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 315:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		/* Check the block is actually allocated. */
 316:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 317:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		configASSERT( pxLink->pxNextFreeBlock == NULL );
 318:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 319:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 320:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		{
 321:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			if( pxLink->pxNextFreeBlock == NULL )
 322:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			{
 323:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				/* The block is being returned to the heap - it is no longer
 324:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				allocated. */
 325:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 326:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 327:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				vTaskSuspendAll();
 328:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				{
 329:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					/* Add this block to the list of free blocks. */
 330:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					xFreeBytesRemaining += pxLink->xBlockSize;
 331:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					traceFREE( pv, pxLink->xBlockSize );
 332:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 333:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				}
 334:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				( void ) xTaskResumeAll();
 335:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			}
 336:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			else
 337:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			{
 338:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				mtCOVERAGE_TEST_MARKER();
 339:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			}
 340:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		}
 341:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		else
 342:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		{
 343:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			mtCOVERAGE_TEST_MARKER();
 344:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		}
 345:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	}
 346:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** }
 347:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 348:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 349:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** size_t xPortGetFreeHeapSize( void )
 350:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** {
 351:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	return xFreeBytesRemaining;
 352:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** }
 353:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 354:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 355:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** size_t xPortGetMinimumEverFreeHeapSize( void )
 356:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** {
 357:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	return xMinimumEverFreeBytesRemaining;
 358:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** }
 359:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 360:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 361:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** void vPortInitialiseBlocks( void )
 362:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** {
 363:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	/* This just exists to keep the linker quiet. */
 364:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** }
 365:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 366:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 367:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** static void prvHeapInit( void )
 368:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** {
 369:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** BlockLink_t *pxFirstFreeBlock;
 370:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** uint8_t *pucAlignedHeap;
 371:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** uint32_t ulAddress;
 372:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 373:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 374:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	/* Ensure the heap starts on a correctly aligned boundary. */
 375:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	ulAddress = ( uint32_t ) ucHeap;
 376:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 377:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 378:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	{
 379:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 380:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		ulAddress &= ~portBYTE_ALIGNMENT_MASK;
 381:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
 382:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	}
 383:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 384:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	pucAlignedHeap = ( uint8_t * ) ulAddress;
 385:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 386:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	/* xStart is used to hold a pointer to the first item in the list of free
 387:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	blocks.  The void cast is used to prevent compiler warnings. */
 388:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 389:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	xStart.xBlockSize = ( size_t ) 0;
 390:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 391:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	/* pxEnd is used to mark the end of the list of free blocks and is inserted
 392:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	at the end of the heap space. */
 393:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
 394:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	ulAddress -= xHeapStructSize;
 395:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	ulAddress &= ~portBYTE_ALIGNMENT_MASK;
 396:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	pxEnd = ( void * ) ulAddress;
 397:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	pxEnd->xBlockSize = 0;
 398:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	pxEnd->pxNextFreeBlock = NULL;
 399:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 400:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	/* To start with there is a single free block that is sized to take up the
 401:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	entire heap space, minus the space taken by pxEnd. */
 402:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 403:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 404:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 405:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 406:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	/* Only one block exists - and it covers the entire usable heap space. */
 407:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 408:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 409:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 410:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	/* Work out the position of the top bit in a size_t variable. */
 411:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 412:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** }
 413:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 414:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 415:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
 416:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** {
  15               		.loc 1 416 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 CF93      		push r28
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 4
  21               		.cfi_offset 28, -3
  22 0002 DF93      		push r29
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 5
  25               		.cfi_offset 29, -4
  26               	/* prologue: function */
  27               	/* frame size = 0 */
  28               	/* stack size = 2 */
  29               	.L__stack_usage = 2
  30 0004 FC01      		movw r30,r24
  31               	.LVL1:
 417:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** BlockLink_t *pxIterator;
 418:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** uint8_t *puc;
 419:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 420:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	/* Iterate through the list until a block is found that has a higher address
 421:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	than the block being inserted. */
 422:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator-
  32               		.loc 1 422 0
  33 0006 A0E0      		ldi r26,lo8(xStart)
  34 0008 B0E0      		ldi r27,hi8(xStart)
  35               	.LVL2:
  36               	.L2:
  37               		.loc 1 422 0 is_stmt 0 discriminator 1
  38 000a CD91      		ld r28,X+
  39 000c DC91      		ld r29,X
  40 000e 1197      		sbiw r26,1
  41 0010 CE17      		cp r28,r30
  42 0012 DF07      		cpc r29,r31
  43 0014 00F4      		brsh .L10
  44 0016 DE01      		movw r26,r28
  45               	.LVL3:
  46 0018 00C0      		rjmp .L2
  47               	.LVL4:
  48               	.L10:
 423:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	{
 424:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		/* Nothing to do here, just iterate to the right position. */
 425:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	}
 426:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 427:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	/* Do the block being inserted, and the block it is being inserted after
 428:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	make a contiguous block of memory? */
 429:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	puc = ( uint8_t * ) pxIterator;
 430:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
  49               		.loc 1 430 0 is_stmt 1
  50 001a 1296      		adiw r26,2
  51 001c 8D91      		ld r24,X+
  52 001e 9C91      		ld r25,X
  53 0020 1397      		sbiw r26,2+1
  54               	.LVL5:
  55 0022 9D01      		movw r18,r26
  56 0024 280F      		add r18,r24
  57 0026 391F      		adc r19,r25
  58 0028 2E17      		cp r18,r30
  59 002a 3F07      		cpc r19,r31
  60 002c 01F4      		brne .L3
 431:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	{
 432:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
  61               		.loc 1 432 0
  62 002e 2281      		ldd r18,Z+2
  63 0030 3381      		ldd r19,Z+3
  64 0032 820F      		add r24,r18
  65 0034 931F      		adc r25,r19
  66 0036 1396      		adiw r26,2+1
  67 0038 9C93      		st X,r25
  68 003a 8E93      		st -X,r24
  69 003c 1297      		sbiw r26,2
  70               	.LVL6:
  71 003e FD01      		movw r30,r26
  72               	.LVL7:
  73               	.L3:
 433:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		pxBlockToInsert = pxIterator;
 434:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	}
 435:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	else
 436:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	{
 437:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		mtCOVERAGE_TEST_MARKER();
 438:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	}
 439:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 440:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	/* Do the block being inserted, and the block it is being inserted before
 441:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	make a contiguous block of memory? */
 442:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	puc = ( uint8_t * ) pxBlockToInsert;
 443:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
  74               		.loc 1 443 0
  75 0040 8281      		ldd r24,Z+2
  76 0042 9381      		ldd r25,Z+3
  77 0044 9F01      		movw r18,r30
  78 0046 280F      		add r18,r24
  79 0048 391F      		adc r19,r25
  80 004a 2C17      		cp r18,r28
  81 004c 3D07      		cpc r19,r29
  82 004e 01F4      		brne .L4
 444:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	{
 445:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		if( pxIterator->pxNextFreeBlock != pxEnd )
  83               		.loc 1 445 0
  84 0050 2091 0000 		lds r18,pxEnd
  85 0054 3091 0000 		lds r19,pxEnd+1
  86 0058 C217      		cp r28,r18
  87 005a D307      		cpc r29,r19
  88 005c 01F0      		breq .L4
 446:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		{
 447:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			/* Form one big block from the two blocks. */
 448:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
  89               		.loc 1 448 0
  90 005e 2A81      		ldd r18,Y+2
  91 0060 3B81      		ldd r19,Y+3
  92 0062 820F      		add r24,r18
  93 0064 931F      		adc r25,r19
  94 0066 9383      		std Z+3,r25
  95 0068 8283      		std Z+2,r24
 449:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
  96               		.loc 1 449 0
  97 006a 8881      		ld r24,Y
  98 006c 9981      		ldd r25,Y+1
  99 006e 9183      		std Z+1,r25
 100 0070 8083      		st Z,r24
 101 0072 00C0      		rjmp .L6
 102               	.L4:
 450:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		}
 451:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		else
 452:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		{
 453:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 454:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		}
 455:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	}
 456:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	else
 457:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	{
 458:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 103               		.loc 1 458 0
 104 0074 D183      		std Z+1,r29
 105 0076 C083      		st Z,r28
 106               	.L6:
 459:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	}
 460:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 461:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	/* If the block being inserted plugged a gab, so was merged with the block
 462:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	before and the block after, then it's pxNextFreeBlock pointer will have
 463:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	already been set, and should not be set here as that would make it point
 464:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	to itself. */
 465:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	if( pxIterator != pxBlockToInsert )
 107               		.loc 1 465 0
 108 0078 AE17      		cp r26,r30
 109 007a BF07      		cpc r27,r31
 110 007c 01F0      		breq .L1
 466:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	{
 467:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 111               		.loc 1 467 0
 112 007e ED93      		st X+,r30
 113 0080 FC93      		st X,r31
 114               	.L1:
 115               	/* epilogue start */
 468:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	}
 469:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	else
 470:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	{
 471:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		mtCOVERAGE_TEST_MARKER();
 472:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	}
 473:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** }
 116               		.loc 1 473 0
 117 0082 DF91      		pop r29
 118 0084 CF91      		pop r28
 119 0086 0895      		ret
 120               		.cfi_endproc
 121               	.LFE10:
 123               	.global	pvPortMalloc
 125               	pvPortMalloc:
 126               	.LFB4:
 152:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
 127               		.loc 1 152 0
 128               		.cfi_startproc
 129               	.LVL8:
 130 0088 CF92      		push r12
 131               	.LCFI2:
 132               		.cfi_def_cfa_offset 4
 133               		.cfi_offset 12, -3
 134 008a DF92      		push r13
 135               	.LCFI3:
 136               		.cfi_def_cfa_offset 5
 137               		.cfi_offset 13, -4
 138 008c EF92      		push r14
 139               	.LCFI4:
 140               		.cfi_def_cfa_offset 6
 141               		.cfi_offset 14, -5
 142 008e FF92      		push r15
 143               	.LCFI5:
 144               		.cfi_def_cfa_offset 7
 145               		.cfi_offset 15, -6
 146 0090 0F93      		push r16
 147               	.LCFI6:
 148               		.cfi_def_cfa_offset 8
 149               		.cfi_offset 16, -7
 150 0092 1F93      		push r17
 151               	.LCFI7:
 152               		.cfi_def_cfa_offset 9
 153               		.cfi_offset 17, -8
 154 0094 CF93      		push r28
 155               	.LCFI8:
 156               		.cfi_def_cfa_offset 10
 157               		.cfi_offset 28, -9
 158 0096 DF93      		push r29
 159               	.LCFI9:
 160               		.cfi_def_cfa_offset 11
 161               		.cfi_offset 29, -10
 162               	/* prologue: function */
 163               	/* frame size = 0 */
 164               	/* stack size = 8 */
 165               	.L__stack_usage = 8
 166 0098 EC01      		movw r28,r24
 167               	.LVL9:
 156:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	{
 168               		.loc 1 156 0
 169 009a 0E94 0000 		call vTaskSuspendAll
 170               	.LVL10:
 160:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		{
 171               		.loc 1 160 0
 172 009e 8091 0000 		lds r24,pxEnd
 173 00a2 9091 0000 		lds r25,pxEnd+1
 174 00a6 892B      		or r24,r25
 175 00a8 01F4      		brne .L12
 176               	.LVL11:
 177               	.LBB4:
 178               	.LBB5:
 388:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	xStart.xBlockSize = ( size_t ) 0;
 179               		.loc 1 388 0
 180 00aa 40E0      		ldi r20,lo8(ucHeap)
 181 00ac 50E0      		ldi r21,hi8(ucHeap)
 182 00ae 5093 0000 		sts xStart+1,r21
 183 00b2 4093 0000 		sts xStart,r20
 389:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 184               		.loc 1 389 0
 185 00b6 1092 0000 		sts xStart+2+1,__zero_reg__
 186 00ba 1092 0000 		sts xStart+2,__zero_reg__
 187               	.LVL12:
 393:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	ulAddress -= xHeapStructSize;
 188               		.loc 1 393 0
 189 00be 6627      		clr r22
 190 00c0 57FD      		sbrc r21,7
 191 00c2 6095      		com r22
 192 00c4 762F      		mov r23,r22
 394:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	ulAddress &= ~portBYTE_ALIGNMENT_MASK;
 193               		.loc 1 394 0
 194 00c6 405E      		subi r20,-32
 195 00c8 564F      		sbci r21,-10
 196 00ca 6F4F      		sbci r22,-1
 197 00cc 7F4F      		sbci r23,-1
 198               	.LVL13:
 396:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	pxEnd->xBlockSize = 0;
 199               		.loc 1 396 0
 200 00ce FA01      		movw r30,r20
 201 00d0 5093 0000 		sts pxEnd+1,r21
 202 00d4 4093 0000 		sts pxEnd,r20
 397:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	pxEnd->pxNextFreeBlock = NULL;
 203               		.loc 1 397 0
 204 00d8 1382      		std Z+3,__zero_reg__
 205 00da 1282      		std Z+2,__zero_reg__
 398:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 206               		.loc 1 398 0
 207 00dc 1182      		std Z+1,__zero_reg__
 208 00de 1082      		st Z,__zero_reg__
 209               	.LVL14:
 403:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 210               		.loc 1 403 0
 211 00e0 CA01      		movw r24,r20
 212 00e2 8050      		subi r24,lo8(ucHeap)
 213 00e4 9040      		sbci r25,hi8(ucHeap)
 214 00e6 9093 0000 		sts ucHeap+2+1,r25
 215 00ea 8093 0000 		sts ucHeap+2,r24
 404:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 216               		.loc 1 404 0
 217 00ee 5093 0000 		sts ucHeap+1,r21
 218 00f2 4093 0000 		sts ucHeap,r20
 407:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 219               		.loc 1 407 0
 220 00f6 9093 0000 		sts xMinimumEverFreeBytesRemaining+1,r25
 221 00fa 8093 0000 		sts xMinimumEverFreeBytesRemaining,r24
 408:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 222               		.loc 1 408 0
 223 00fe 9093 0000 		sts xFreeBytesRemaining+1,r25
 224 0102 8093 0000 		sts xFreeBytesRemaining,r24
 411:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** }
 225               		.loc 1 411 0
 226 0106 80E0      		ldi r24,0
 227 0108 90E8      		ldi r25,lo8(-128)
 228 010a 9093 0000 		sts xBlockAllocatedBit+1,r25
 229 010e 8093 0000 		sts xBlockAllocatedBit,r24
 230               	.LVL15:
 231               	.L12:
 232               	.LBE5:
 233               	.LBE4:
 173:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		{
 234               		.loc 1 173 0
 235 0112 C090 0000 		lds r12,xBlockAllocatedBit
 236 0116 D090 0000 		lds r13,xBlockAllocatedBit+1
 237 011a CE01      		movw r24,r28
 238 011c 8C21      		and r24,r12
 239 011e 9D21      		and r25,r13
 240 0120 892B      		or r24,r25
 241 0122 01F0      		breq .+2
 242 0124 00C0      		rjmp .L23
 177:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			{
 243               		.loc 1 177 0
 244 0126 2097      		sbiw r28,0
 245 0128 01F4      		brne .+2
 246 012a 00C0      		rjmp .L23
 179:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 247               		.loc 1 179 0
 248 012c 9E01      		movw r18,r28
 249 012e 2C5F      		subi r18,-4
 250 0130 3F4F      		sbci r19,-1
 251               	.LVL16:
 199:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			{
 252               		.loc 1 199 0
 253 0132 01F4      		brne .+2
 254 0134 00C0      		rjmp .L23
 199:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			{
 255               		.loc 1 199 0 is_stmt 0 discriminator 1
 256 0136 0091 0000 		lds r16,xFreeBytesRemaining
 257 013a 1091 0000 		lds r17,xFreeBytesRemaining+1
 258 013e 0217      		cp r16,r18
 259 0140 1307      		cpc r17,r19
 260 0142 00F4      		brsh .+2
 261 0144 00C0      		rjmp .L23
 262               	.LVL17:
 204:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 263               		.loc 1 204 0 is_stmt 1
 264 0146 C091 0000 		lds r28,xStart
 265 014a D091 0000 		lds r29,xStart+1
 266               	.LVL18:
 203:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				pxBlock = xStart.pxNextFreeBlock;
 267               		.loc 1 203 0
 268 014e E0E0      		ldi r30,lo8(xStart)
 269 0150 F0E0      		ldi r31,hi8(xStart)
 270               	.LVL19:
 271               	.L16:
 205:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				{
 272               		.loc 1 205 0
 273 0152 4A81      		ldd r20,Y+2
 274 0154 5B81      		ldd r21,Y+3
 275 0156 4217      		cp r20,r18
 276 0158 5307      		cpc r21,r19
 277 015a 00F0      		brlo .L14
 278               	.L17:
 213:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				{
 279               		.loc 1 213 0
 280 015c 8091 0000 		lds r24,pxEnd
 281 0160 9091 0000 		lds r25,pxEnd+1
 282 0164 C817      		cp r28,r24
 283 0166 D907      		cpc r29,r25
 284 0168 01F4      		brne .L15
 285 016a 00C0      		rjmp .L23
 286               	.L14:
 205:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				{
 287               		.loc 1 205 0 discriminator 1
 288 016c 8881      		ld r24,Y
 289 016e 9981      		ldd r25,Y+1
 290 0170 0097      		sbiw r24,0
 291 0172 01F0      		breq .L17
 292 0174 FE01      		movw r30,r28
 293               	.LVL20:
 294 0176 EC01      		movw r28,r24
 295               	.LVL21:
 296 0178 00C0      		rjmp .L16
 297               	.LVL22:
 298               	.L15:
 217:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 299               		.loc 1 217 0
 300 017a E080      		ld r14,Z
 301 017c F180      		ldd r15,Z+1
 302 017e 84E0      		ldi r24,4
 303 0180 E80E      		add r14,r24
 304 0182 F11C      		adc r15,__zero_reg__
 305               	.LVL23:
 221:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 306               		.loc 1 221 0
 307 0184 8881      		ld r24,Y
 308 0186 9981      		ldd r25,Y+1
 309 0188 9183      		std Z+1,r25
 310 018a 8083      		st Z,r24
 225:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					{
 311               		.loc 1 225 0
 312 018c 421B      		sub r20,r18
 313 018e 530B      		sbc r21,r19
 314 0190 4930      		cpi r20,9
 315 0192 5105      		cpc r21,__zero_reg__
 316 0194 00F0      		brlo .L18
 231:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 317               		.loc 1 231 0
 318 0196 CE01      		movw r24,r28
 319 0198 820F      		add r24,r18
 320 019a 931F      		adc r25,r19
 321               	.LVL24:
 236:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 						pxBlock->xBlockSize = xWantedSize;
 322               		.loc 1 236 0
 323 019c FC01      		movw r30,r24
 324               	.LVL25:
 325 019e 5383      		std Z+3,r21
 326 01a0 4283      		std Z+2,r20
 237:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 327               		.loc 1 237 0
 328 01a2 3B83      		std Y+3,r19
 329 01a4 2A83      		std Y+2,r18
 240:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					}
 330               		.loc 1 240 0
 331 01a6 0E94 0000 		call prvInsertBlockIntoFreeList
 332               	.LVL26:
 333               	.L18:
 247:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 334               		.loc 1 247 0
 335 01aa 8A81      		ldd r24,Y+2
 336 01ac 9B81      		ldd r25,Y+3
 337 01ae 9801      		movw r18,r16
 338 01b0 281B      		sub r18,r24
 339 01b2 390B      		sbc r19,r25
 340 01b4 3093 0000 		sts xFreeBytesRemaining+1,r19
 341 01b8 2093 0000 		sts xFreeBytesRemaining,r18
 249:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					{
 342               		.loc 1 249 0
 343 01bc 4091 0000 		lds r20,xMinimumEverFreeBytesRemaining
 344 01c0 5091 0000 		lds r21,xMinimumEverFreeBytesRemaining+1
 345 01c4 2417      		cp r18,r20
 346 01c6 3507      		cpc r19,r21
 347 01c8 00F4      		brsh .L19
 251:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					}
 348               		.loc 1 251 0
 349 01ca 3093 0000 		sts xMinimumEverFreeBytesRemaining+1,r19
 350 01ce 2093 0000 		sts xMinimumEverFreeBytesRemaining,r18
 351               	.L19:
 260:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					pxBlock->pxNextFreeBlock = NULL;
 352               		.loc 1 260 0
 353 01d2 C82A      		or r12,r24
 354 01d4 D92A      		or r13,r25
 355 01d6 DB82      		std Y+3,r13
 356 01d8 CA82      		std Y+2,r12
 261:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				}
 357               		.loc 1 261 0
 358 01da 1982      		std Y+1,__zero_reg__
 359 01dc 1882      		st Y,__zero_reg__
 360 01de 00C0      		rjmp .L13
 361               	.LVL27:
 362               	.L23:
 154:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 363               		.loc 1 154 0
 364 01e0 E12C      		mov r14,__zero_reg__
 365 01e2 F12C      		mov r15,__zero_reg__
 366               	.LVL28:
 367               	.L13:
 280:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 368               		.loc 1 280 0
 369 01e4 0E94 0000 		call xTaskResumeAll
 370               	.LVL29:
 298:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 371               		.loc 1 298 0
 372 01e8 C701      		movw r24,r14
 373               	/* epilogue start */
 374 01ea DF91      		pop r29
 375 01ec CF91      		pop r28
 376 01ee 1F91      		pop r17
 377 01f0 0F91      		pop r16
 378 01f2 FF90      		pop r15
 379 01f4 EF90      		pop r14
 380               	.LVL30:
 381 01f6 DF90      		pop r13
 382 01f8 CF90      		pop r12
 383 01fa 0895      		ret
 384               		.cfi_endproc
 385               	.LFE4:
 387               	.global	vPortFree
 389               	vPortFree:
 390               	.LFB5:
 302:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** uint8_t *puc = ( uint8_t * ) pv;
 391               		.loc 1 302 0
 392               		.cfi_startproc
 393               	.LVL31:
 394 01fc CF93      		push r28
 395               	.LCFI10:
 396               		.cfi_def_cfa_offset 4
 397               		.cfi_offset 28, -3
 398 01fe DF93      		push r29
 399               	.LCFI11:
 400               		.cfi_def_cfa_offset 5
 401               		.cfi_offset 29, -4
 402               	/* prologue: function */
 403               	/* frame size = 0 */
 404               	/* stack size = 2 */
 405               	.L__stack_usage = 2
 406               	.LVL32:
 306:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	{
 407               		.loc 1 306 0
 408 0200 0097      		sbiw r24,0
 409 0202 01F0      		breq .L25
 410               	.LVL33:
 319:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		{
 411               		.loc 1 319 0
 412 0204 EC01      		movw r28,r24
 413 0206 2497      		sbiw r28,4
 414               	.LVL34:
 415 0208 8A81      		ldd r24,Y+2
 416 020a 9B81      		ldd r25,Y+3
 417               	.LVL35:
 418 020c 2091 0000 		lds r18,xBlockAllocatedBit
 419 0210 3091 0000 		lds r19,xBlockAllocatedBit+1
 420 0214 A901      		movw r20,r18
 421 0216 4823      		and r20,r24
 422 0218 5923      		and r21,r25
 423 021a 452B      		or r20,r21
 424 021c 01F0      		breq .L25
 321:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			{
 425               		.loc 1 321 0
 426 021e 4881      		ld r20,Y
 427 0220 5981      		ldd r21,Y+1
 428 0222 452B      		or r20,r21
 429 0224 01F4      		brne .L25
 325:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 430               		.loc 1 325 0
 431 0226 2095      		com r18
 432 0228 3095      		com r19
 433 022a 8223      		and r24,r18
 434 022c 9323      		and r25,r19
 435 022e 9B83      		std Y+3,r25
 436 0230 8A83      		std Y+2,r24
 327:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				{
 437               		.loc 1 327 0
 438 0232 0E94 0000 		call vTaskSuspendAll
 439               	.LVL36:
 330:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					traceFREE( pv, pxLink->xBlockSize );
 440               		.loc 1 330 0
 441 0236 2091 0000 		lds r18,xFreeBytesRemaining
 442 023a 3091 0000 		lds r19,xFreeBytesRemaining+1
 443 023e 8A81      		ldd r24,Y+2
 444 0240 9B81      		ldd r25,Y+3
 445 0242 820F      		add r24,r18
 446 0244 931F      		adc r25,r19
 447 0246 9093 0000 		sts xFreeBytesRemaining+1,r25
 448 024a 8093 0000 		sts xFreeBytesRemaining,r24
 332:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				}
 449               		.loc 1 332 0
 450 024e CE01      		movw r24,r28
 451 0250 0E94 0000 		call prvInsertBlockIntoFreeList
 452               	.LVL37:
 453               	/* epilogue start */
 346:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 454               		.loc 1 346 0
 455 0254 DF91      		pop r29
 456 0256 CF91      		pop r28
 457               	.LVL38:
 334:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			}
 458               		.loc 1 334 0
 459 0258 0C94 0000 		jmp xTaskResumeAll
 460               	.LVL39:
 461               	.L25:
 462               	/* epilogue start */
 346:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 463               		.loc 1 346 0
 464 025c DF91      		pop r29
 465 025e CF91      		pop r28
 466 0260 0895      		ret
 467               		.cfi_endproc
 468               	.LFE5:
 470               	.global	xPortGetFreeHeapSize
 472               	xPortGetFreeHeapSize:
 473               	.LFB6:
 350:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	return xFreeBytesRemaining;
 474               		.loc 1 350 0
 475               		.cfi_startproc
 476               	/* prologue: function */
 477               	/* frame size = 0 */
 478               	/* stack size = 0 */
 479               	.L__stack_usage = 0
 352:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 480               		.loc 1 352 0
 481 0262 8091 0000 		lds r24,xFreeBytesRemaining
 482 0266 9091 0000 		lds r25,xFreeBytesRemaining+1
 483 026a 0895      		ret
 484               		.cfi_endproc
 485               	.LFE6:
 487               	.global	xPortGetMinimumEverFreeHeapSize
 489               	xPortGetMinimumEverFreeHeapSize:
 490               	.LFB7:
 356:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	return xMinimumEverFreeBytesRemaining;
 491               		.loc 1 356 0
 492               		.cfi_startproc
 493               	/* prologue: function */
 494               	/* frame size = 0 */
 495               	/* stack size = 0 */
 496               	.L__stack_usage = 0
 358:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 497               		.loc 1 358 0
 498 026c 8091 0000 		lds r24,xMinimumEverFreeBytesRemaining
 499 0270 9091 0000 		lds r25,xMinimumEverFreeBytesRemaining+1
 500 0274 0895      		ret
 501               		.cfi_endproc
 502               	.LFE7:
 504               	.global	vPortInitialiseBlocks
 506               	vPortInitialiseBlocks:
 507               	.LFB8:
 362:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	/* This just exists to keep the linker quiet. */
 508               		.loc 1 362 0
 509               		.cfi_startproc
 510               	/* prologue: function */
 511               	/* frame size = 0 */
 512               	/* stack size = 0 */
 513               	.L__stack_usage = 0
 514 0276 0895      		ret
 515               		.cfi_endproc
 516               	.LFE8:
 518               		.local	xBlockAllocatedBit
 519               		.comm	xBlockAllocatedBit,2,1
 520               		.local	xMinimumEverFreeBytesRemaining
 521               		.comm	xMinimumEverFreeBytesRemaining,2,1
 522               		.local	xFreeBytesRemaining
 523               		.comm	xFreeBytesRemaining,2,1
 524               		.local	pxEnd
 525               		.comm	pxEnd,2,1
 526               		.local	xStart
 527               		.comm	xStart,4,1
 528               		.local	ucHeap
 529               		.comm	ucHeap,2340,1
 530               	.Letext0:
 531               		.file 2 "/usr/local/Cellar/avr-gcc/4.9.2/lib/gcc/avr/4.9.2/include/stddef.h"
 532               		.file 3 "/usr/local/Cellar/avr-gcc/4.9.2/avr/include/stdint.h"
 533               		.file 4 "External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/GCC/ATMega2560/portmacro.h"
 534               		.file 5 "External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/include/task.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 heap_4.c
/var/folders/3x/fbs2jxzx41l_jft3039l7_gw0000gn/T//ccY9BItZ.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/3x/fbs2jxzx41l_jft3039l7_gw0000gn/T//ccY9BItZ.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/3x/fbs2jxzx41l_jft3039l7_gw0000gn/T//ccY9BItZ.s:4      *ABS*:000000000000003f __SREG__
/var/folders/3x/fbs2jxzx41l_jft3039l7_gw0000gn/T//ccY9BItZ.s:5      *ABS*:000000000000003b __RAMPZ__
/var/folders/3x/fbs2jxzx41l_jft3039l7_gw0000gn/T//ccY9BItZ.s:6      *ABS*:0000000000000000 __tmp_reg__
/var/folders/3x/fbs2jxzx41l_jft3039l7_gw0000gn/T//ccY9BItZ.s:7      *ABS*:0000000000000001 __zero_reg__
/var/folders/3x/fbs2jxzx41l_jft3039l7_gw0000gn/T//ccY9BItZ.s:12     .text:0000000000000000 prvInsertBlockIntoFreeList
/var/folders/3x/fbs2jxzx41l_jft3039l7_gw0000gn/T//ccY9BItZ.s:525    .bss:0000000000000008 xStart
/var/folders/3x/fbs2jxzx41l_jft3039l7_gw0000gn/T//ccY9BItZ.s:523    .bss:0000000000000006 pxEnd
/var/folders/3x/fbs2jxzx41l_jft3039l7_gw0000gn/T//ccY9BItZ.s:125    .text:0000000000000088 pvPortMalloc
/var/folders/3x/fbs2jxzx41l_jft3039l7_gw0000gn/T//ccY9BItZ.s:527    .bss:000000000000000c ucHeap
/var/folders/3x/fbs2jxzx41l_jft3039l7_gw0000gn/T//ccY9BItZ.s:519    .bss:0000000000000002 xMinimumEverFreeBytesRemaining
/var/folders/3x/fbs2jxzx41l_jft3039l7_gw0000gn/T//ccY9BItZ.s:521    .bss:0000000000000004 xFreeBytesRemaining
                             .bss:0000000000000000 xBlockAllocatedBit
/var/folders/3x/fbs2jxzx41l_jft3039l7_gw0000gn/T//ccY9BItZ.s:389    .text:00000000000001fc vPortFree
/var/folders/3x/fbs2jxzx41l_jft3039l7_gw0000gn/T//ccY9BItZ.s:472    .text:0000000000000262 xPortGetFreeHeapSize
/var/folders/3x/fbs2jxzx41l_jft3039l7_gw0000gn/T//ccY9BItZ.s:489    .text:000000000000026c xPortGetMinimumEverFreeHeapSize
/var/folders/3x/fbs2jxzx41l_jft3039l7_gw0000gn/T//ccY9BItZ.s:506    .text:0000000000000276 vPortInitialiseBlocks

UNDEFINED SYMBOLS
vTaskSuspendAll
xTaskResumeAll
__do_clear_bss

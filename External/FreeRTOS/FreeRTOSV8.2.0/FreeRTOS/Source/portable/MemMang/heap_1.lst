   1               		.file	"heap_1.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               	.global	pvPortMalloc
  13               	pvPortMalloc:
  14               	.LFB4:
  15               		.file 1 "External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c"
   1:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** /*
   2:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c ****     FreeRTOS V8.2.0 - Copyright (C) 2015 Real Time Engineers Ltd.
   3:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c ****     All rights reserved
   4:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 
   5:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 
   7:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c ****     This file is part of the FreeRTOS distribution.
   8:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 
   9:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c ****     Free Software Foundation >>!AND MODIFIED BY!<< the FreeRTOS exception.
  12:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 
  13:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 	***************************************************************************
  14:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 	***************************************************************************
  19:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 
  20:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c ****     link: http://www.freertos.org/a00114.html
  24:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 
  25:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c ****     ***************************************************************************
  26:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c ****      *                                                                       *
  27:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c ****      *    platform software that is more than just the market leader, it     *
  30:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c ****      *    is the industry's de facto standard.                               *
  31:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c ****      *                                                                       *
  32:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c ****      *    tutorial book, reference manual, or both:                          *
  35:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c ****      *                                                                       *
  37:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c ****     ***************************************************************************
  38:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 
  39:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 	the FAQ page "My application does not run, what could be wrong?".  Have you
  41:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 	defined configASSERT()?
  42:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 
  43:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 	http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 	embedded software for free we request you assist our global community by
  45:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 	participating in the support forum.
  46:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 
  47:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 	http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 	be as productive as possible as early as possible.  Now you can receive
  49:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 	FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 	Ltd, and the world's leading authority on the world's leading RTOS.
  51:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 
  52:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 
  56:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 
  59:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 
  63:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c ****     engineered and independently SIL3 certified version for use in safety and
  65:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c ****     mission critical applications that require provable dependability.
  66:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 
  67:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c ****     1 tab == 4 spaces!
  68:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** */
  69:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 
  70:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 
  71:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** /*
  72:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c ****  * The simplest possible implementation of pvPortMalloc().  Note that this
  73:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c ****  * implementation does NOT allow allocated memory to be freed again.
  74:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c ****  *
  75:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c ****  * See heap_2.c, heap_3.c and heap_4.c for alternative implementations, and the
  76:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c ****  * memory management pages of http://www.FreeRTOS.org for more information.
  77:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c ****  */
  78:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** #include <stdlib.h>
  79:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 
  80:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  81:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** all the API functions to use the MPU wrappers.  That should only be done when
  82:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** task.h is included from an application file. */
  83:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  84:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 
  85:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** #include "FreeRTOS.h"
  86:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** #include "task.h"
  87:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 
  88:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  89:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 
  90:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** /* A few bytes might be lost to byte aligning the heap start address. */
  91:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** #define configADJUSTED_HEAP_SIZE	( configTOTAL_HEAP_SIZE - portBYTE_ALIGNMENT )
  92:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 
  93:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** /* Allocate the memory for the heap. */
  94:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** static uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];
  95:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** static size_t xNextFreeByte = ( size_t ) 0;
  96:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 
  97:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** /*-----------------------------------------------------------*/
  98:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 
  99:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** void *pvPortMalloc( size_t xWantedSize )
 100:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** {
  16               		.loc 1 100 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 CF93      		push r28
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 4
  22               		.cfi_offset 28, -3
  23 0002 DF93      		push r29
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 5
  26               		.cfi_offset 29, -4
  27               	/* prologue: function */
  28               	/* frame size = 0 */
  29               	/* stack size = 2 */
  30               	.L__stack_usage = 2
  31 0004 EC01      		movw r28,r24
  32               	.LVL1:
 101:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** void *pvReturn = NULL;
 102:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** static uint8_t *pucAlignedHeap = NULL;
 103:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 
 104:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 	/* Ensure that blocks are always aligned to the required number of bytes. */
 105:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 	#if portBYTE_ALIGNMENT != 1
 106:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 107:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 		{
 108:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 			/* Byte alignment required. */
 109:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 110:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 		}
 111:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 	#endif
 112:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 
 113:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 	vTaskSuspendAll();
  33               		.loc 1 113 0
  34 0006 0E94 0000 		call vTaskSuspendAll
  35               	.LVL2:
 114:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 	{
 115:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 		if( pucAlignedHeap == NULL )
  36               		.loc 1 115 0
  37 000a 8091 0000 		lds r24,pucAlignedHeap.1922
  38 000e 9091 0000 		lds r25,pucAlignedHeap.1922+1
  39 0012 892B      		or r24,r25
  40 0014 01F4      		brne .L2
 116:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 		{
 117:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 			/* Ensure the heap starts on a correctly aligned boundary. */
 118:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & (
  41               		.loc 1 118 0
  42 0016 80E0      		ldi r24,lo8(ucHeap+1)
  43 0018 90E0      		ldi r25,hi8(ucHeap+1)
  44 001a 9093 0000 		sts pucAlignedHeap.1922+1,r25
  45 001e 8093 0000 		sts pucAlignedHeap.1922,r24
  46               	.L2:
 119:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 		}
 120:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 
 121:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 		/* Check there is enough room left for the allocation. */
 122:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  47               		.loc 1 122 0
  48 0022 2091 0000 		lds r18,xNextFreeByte
  49 0026 3091 0000 		lds r19,xNextFreeByte+1
  50 002a CE01      		movw r24,r28
  51 002c 820F      		add r24,r18
  52 002e 931F      		adc r25,r19
  53 0030 8332      		cpi r24,35
  54 0032 49E0      		ldi r20,9
  55 0034 9407      		cpc r25,r20
  56 0036 00F4      		brsh .L5
  57               		.loc 1 122 0 is_stmt 0 discriminator 1
  58 0038 2817      		cp r18,r24
  59 003a 3907      		cpc r19,r25
  60 003c 00F4      		brsh .L5
 123:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 124:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 		{
 125:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 			/* Return the next free byte then increment the index past this
 126:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 			block. */
 127:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 			pvReturn = pucAlignedHeap + xNextFreeByte;
  61               		.loc 1 127 0 is_stmt 1
  62 003e C091 0000 		lds r28,pucAlignedHeap.1922
  63 0042 D091 0000 		lds r29,pucAlignedHeap.1922+1
  64               	.LVL3:
  65 0046 C20F      		add r28,r18
  66 0048 D31F      		adc r29,r19
  67               	.LVL4:
 128:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 			xNextFreeByte += xWantedSize;
  68               		.loc 1 128 0
  69 004a 9093 0000 		sts xNextFreeByte+1,r25
  70 004e 8093 0000 		sts xNextFreeByte,r24
  71 0052 00C0      		rjmp .L3
  72               	.LVL5:
  73               	.L5:
 101:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** static uint8_t *pucAlignedHeap = NULL;
  74               		.loc 1 101 0
  75 0054 C0E0      		ldi r28,0
  76 0056 D0E0      		ldi r29,0
  77               	.LVL6:
  78               	.L3:
 129:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 		}
 130:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 
 131:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 		traceMALLOC( pvReturn, xWantedSize );
 132:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 	}
 133:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 	( void ) xTaskResumeAll();
  79               		.loc 1 133 0
  80 0058 0E94 0000 		call xTaskResumeAll
  81               	.LVL7:
 134:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 
 135:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
 136:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 	{
 137:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 		if( pvReturn == NULL )
 138:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 		{
 139:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 			extern void vApplicationMallocFailedHook( void );
 140:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 			vApplicationMallocFailedHook();
 141:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 		}
 142:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 	}
 143:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 	#endif
 144:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 
 145:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 	return pvReturn;
 146:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** }
  82               		.loc 1 146 0
  83 005c CE01      		movw r24,r28
  84               	/* epilogue start */
  85 005e DF91      		pop r29
  86 0060 CF91      		pop r28
  87               	.LVL8:
  88 0062 0895      		ret
  89               		.cfi_endproc
  90               	.LFE4:
  92               	.global	vPortFree
  94               	vPortFree:
  95               	.LFB5:
 147:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** /*-----------------------------------------------------------*/
 148:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 
 149:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** void vPortFree( void *pv )
 150:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** {
  96               		.loc 1 150 0
  97               		.cfi_startproc
  98               	.LVL9:
  99               	/* prologue: function */
 100               	/* frame size = 0 */
 101               	/* stack size = 0 */
 102               	.L__stack_usage = 0
 103 0064 0895      		ret
 104               		.cfi_endproc
 105               	.LFE5:
 107               	.global	vPortInitialiseBlocks
 109               	vPortInitialiseBlocks:
 110               	.LFB6:
 151:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 	/* Memory cannot be freed using this scheme.  See heap_2.c, heap_3.c and
 152:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 	heap_4.c for alternative implementations, and the memory management pages of
 153:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 	http://www.FreeRTOS.org for more information. */
 154:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 	( void ) pv;
 155:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 
 156:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 	/* Force an assert as it is invalid to call this function. */
 157:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 	configASSERT( pv == NULL );
 158:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** }
 159:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** /*-----------------------------------------------------------*/
 160:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 
 161:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** void vPortInitialiseBlocks( void )
 162:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** {
 111               		.loc 1 162 0
 112               		.cfi_startproc
 113               	/* prologue: function */
 114               	/* frame size = 0 */
 115               	/* stack size = 0 */
 116               	.L__stack_usage = 0
 163:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 	/* Only required when static memory is not cleared. */
 164:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 	xNextFreeByte = ( size_t ) 0;
 117               		.loc 1 164 0
 118 0066 1092 0000 		sts xNextFreeByte+1,__zero_reg__
 119 006a 1092 0000 		sts xNextFreeByte,__zero_reg__
 120 006e 0895      		ret
 121               		.cfi_endproc
 122               	.LFE6:
 124               	.global	xPortGetFreeHeapSize
 126               	xPortGetFreeHeapSize:
 127               	.LFB7:
 165:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** }
 166:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** /*-----------------------------------------------------------*/
 167:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 
 168:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** size_t xPortGetFreeHeapSize( void )
 169:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** {
 128               		.loc 1 169 0
 129               		.cfi_startproc
 130               	/* prologue: function */
 131               	/* frame size = 0 */
 132               	/* stack size = 0 */
 133               	.L__stack_usage = 0
 170:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** 	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
 134               		.loc 1 170 0
 135 0070 2091 0000 		lds r18,xNextFreeByte
 136 0074 3091 0000 		lds r19,xNextFreeByte+1
 171:External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/MemMang/heap_1.c **** }
 137               		.loc 1 171 0
 138 0078 83E2      		ldi r24,lo8(35)
 139 007a 99E0      		ldi r25,lo8(9)
 140 007c 821B      		sub r24,r18
 141 007e 930B      		sbc r25,r19
 142 0080 0895      		ret
 143               		.cfi_endproc
 144               	.LFE7:
 146               		.local	pucAlignedHeap.1922
 147               		.comm	pucAlignedHeap.1922,2,1
 148               		.local	xNextFreeByte
 149               		.comm	xNextFreeByte,2,1
 150               		.local	ucHeap
 151               		.comm	ucHeap,2340,1
 152               	.Letext0:
 153               		.file 2 "/usr/local/Cellar/avr-gcc/4.9.2/lib/gcc/avr/4.9.2/include/stddef.h"
 154               		.file 3 "/usr/local/Cellar/avr-gcc/4.9.2/avr/include/stdint.h"
 155               		.file 4 "External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/portable/GCC/ATMega2560/portmacro.h"
 156               		.file 5 "External/FreeRTOS/FreeRTOSV8.2.0/FreeRTOS/Source/include/task.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 heap_1.c
/var/folders/3x/fbs2jxzx41l_jft3039l7_gw0000gn/T//ccRyRQA0.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/3x/fbs2jxzx41l_jft3039l7_gw0000gn/T//ccRyRQA0.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/3x/fbs2jxzx41l_jft3039l7_gw0000gn/T//ccRyRQA0.s:4      *ABS*:000000000000003f __SREG__
/var/folders/3x/fbs2jxzx41l_jft3039l7_gw0000gn/T//ccRyRQA0.s:5      *ABS*:000000000000003b __RAMPZ__
/var/folders/3x/fbs2jxzx41l_jft3039l7_gw0000gn/T//ccRyRQA0.s:6      *ABS*:0000000000000000 __tmp_reg__
/var/folders/3x/fbs2jxzx41l_jft3039l7_gw0000gn/T//ccRyRQA0.s:7      *ABS*:0000000000000001 __zero_reg__
/var/folders/3x/fbs2jxzx41l_jft3039l7_gw0000gn/T//ccRyRQA0.s:13     .text:0000000000000000 pvPortMalloc
                             .bss:0000000000000000 pucAlignedHeap.1922
/var/folders/3x/fbs2jxzx41l_jft3039l7_gw0000gn/T//ccRyRQA0.s:149    .bss:0000000000000004 ucHeap
/var/folders/3x/fbs2jxzx41l_jft3039l7_gw0000gn/T//ccRyRQA0.s:147    .bss:0000000000000002 xNextFreeByte
/var/folders/3x/fbs2jxzx41l_jft3039l7_gw0000gn/T//ccRyRQA0.s:94     .text:0000000000000064 vPortFree
/var/folders/3x/fbs2jxzx41l_jft3039l7_gw0000gn/T//ccRyRQA0.s:109    .text:0000000000000066 vPortInitialiseBlocks
/var/folders/3x/fbs2jxzx41l_jft3039l7_gw0000gn/T//ccRyRQA0.s:126    .text:0000000000000070 xPortGetFreeHeapSize

UNDEFINED SYMBOLS
vTaskSuspendAll
xTaskResumeAll
__do_clear_bss
